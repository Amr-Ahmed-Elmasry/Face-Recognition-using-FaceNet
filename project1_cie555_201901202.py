# -*- coding: utf-8 -*-
"""Project1_CIE555_201901202.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YjM9x2tz4Z9hsk-qMN7vm-Vov21ESGUW
"""

!pip install keras-facenet
!pip install mtcnn

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
!pip install opendatasets
import opendatasets as od
import pandas
# %cd /content/drive/MyDrive/CIE555/Project1/
od.download("https://www.kaggle.com/datasets/dansbecker/5-celebrity-faces-dataset")

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/SiameseProject

from PIL import Image
from mtcnn.mtcnn import MTCNN
import numpy as np
# extract a single face from a given photograph
def extract_face(filename, required_size=(160, 160)):
    # load image from file
    image = Image.open(filename)
    # convert to RGB, if needed
    image = image.convert('RGB')
    # convert to array
    pixels = np.asarray(image)
    # create the detector, using default weights
    detector = MTCNN()
    # detect faces in the image
    results = detector.detect_faces(pixels)
    # extract the bounding box from the first face
    x1, y1, width, height = results[0]['box']
    # deal with negative pixel index
    x1, y1 = abs(x1), abs(y1)
    x2, y2 = x1 + width, y1 + height
    # extract the face
    face = pixels[y1:y2, x1:x2]
    # resize pixels to the model size
    image = Image.fromarray(face)
    image = image.resize(required_size)
    face_array = np.asarray(image)
    return face_array

import matplotlib.pyplot as plt
# load the photo and extract the face
pixels = extract_face('./5-celebrity-faces-dataset/train/ben_afflek/httpcsvkmeuaeccjpg.jpg')
plt.imshow(pixels)
plt.show()
print(pixels.shape)

# Commented out IPython magic to ensure Python compatibility.
# %ls 5-celebrity-faces-dataset/train/ben_afflek

def get_embedding(model, face):
    # scale pixel values
    face = face.astype('float32')
    # standardization
    mean, std = face.mean(), face.std()
    face = (face-mean)/std
    # transfer face into one sample (3 dimension to 4 dimension)
    sample = np.expand_dims(face, axis=0)
    # make prediction to get embedding
    yhat = model.predict(sample)
    return yhat[0]

from keras_facenet import FaceNet
def Face_Verification(image_1, image_2):
  pixels_1 = extract_face(image_1)
  pixels_2 = extract_face(image_2)
  embedder = FaceNet()
  # get the face embedding for one face
  facenet_model=embedder.model
  detect_face1 = get_embedding(facenet_model, pixels_1)
  detect_face2 = get_embedding(facenet_model, pixels_2)
  dd = embedder.compute_distance(detect_face1, detect_face2)
  string = ''
  if dd<.5:
    string = 'Same Person'
  else:
    string = 'different person'
  return [string, dd]

#Different Persons Verification
ii='/content/drive/MyDrive/SiameseProject/5-celebrity-faces-dataset/train/elton_john/httpiamediaimdbcomimagesMMVBMTAxNDUMzUwOTdeQTJeQWpwZBbWUMDUOTAyNTIVUXCRALjpg.jpg'
jj='/content/drive/MyDrive/SiameseProject/5-celebrity-faces-dataset/train/jerry_seinfeld/httpimagesrottentomatoescomimagesspotlightsnewsjerryseinfeldjpg.jpg'
verification = Face_Verification(ii, jj)
verification

#Same Persons Verification
ii='/content/drive/MyDrive/SiameseProject/5-celebrity-faces-dataset/train/madonna/httpiamediaimdbcomimagesMMVBMTANDQNTAxNDVeQTJeQWpwZBbWUMDIMjQOTYVUXCRALjpg.jpg'
jj='/content/drive/MyDrive/SiameseProject/5-celebrity-faces-dataset/train/madonna/httpimagegaladevcmseamadonnaprivatdetektivsquaretopsquarejpgv.jpg'
verification = Face_Verification(ii, jj)
verification

import os
def Which_person(image, dataset):
    dictionary = {}
    for folder in os.listdir(dataset):
        path = dataset + folder + '/'
        sum = 0.0
        count = 0
        for imgpath in os.listdir(path):
          image_path = path + imgpath
          if (image != image_path):
            verification = Face_Verification(image, image_path)
            distance = verification[1]
            sum += distance
            count += 1
        dictionary[folder] = sum / count
    return dictionary

pixels = extract_face('/content/drive/MyDrive/img_dataset/Amr Elmasry/IMG_7696.JPG')
plt.imshow(pixels)
plt.show()
print(pixels.shape)

dictt = Which_person('/content/drive/MyDrive/img_dataset/Amr Elmasry/IMG_7696.JPG', '/content/drive/MyDrive/img_dataset/')
Person_Name = ''
min_distance = 1000
for person in dictt.keys():
  if dictt[person] < min_distance:
    Person_Name = person
    min_distance = dictt[person]

print(dictt)
threshold = 0.6
if min_distance > threshold:
  print('This Person Is Not Found')
else:
  print(f"The Person You Are Searching Four is ({Person_Name}) And Has Minimum Distance Equal to ({min_distance})")